import yt_dlp
import tkinter as tk
from tkinter import filedialog

def list_formats(video_url):
    """List available formats for a given video URL."""
    ydl_opts = {'quiet': True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(video_url, download=False)
        formats = info_dict.get('formats', [])

        print("\nAvailable formats:")
        for f in formats:
            resolution = f.get('height', 'N/A')
            vcodec = f.get('vcodec', 'N/A')
            acodec = f.get('acodec', 'N/A')
            format_id = f.get('format_id', 'N/A')
            print(f"Resolution: {resolution}p | Video codec: {vcodec} | Audio codec: {acodec} | Format ID: {format_id}")


import yt_dlp
import tkinter as tk
from tkinter import filedialog

def list_available_subtitles(video_url):
    """List available subtitle languages for auto-generated subtitles of a video."""
    ydl_opts = {'quiet': True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(video_url, download=False)
        subtitles = info_dict.get('automatic_captions', {})

        if subtitles:
            print("\nAvailable auto-generated subtitle languages:")
            for lang_code in subtitles.keys():
                print(f"Language code: {lang_code}")
        else:
            print("No auto-generated subtitles available for this video.")

    return subtitles.keys()  # Return available languages as list

def download_subtitle(video_url, subtitle_lang, save_path):
    """Download subtitles in the specified language for a video."""
    ydl_opts = {
        'writesubtitles': True,
        'subtitleslangs': [subtitle_lang],
        'subtitlesformat': 'vtt',
        'skip_download': True,
        'outtmpl': save_path,
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([video_url])
            print(f"Subtitle in '{subtitle_lang}' downloaded successfully and saved to: {save_path}")
    except yt_dlp.utils.ExtractorError as e:
        print(f"An error occurred: {e}. Please ensure the chosen subtitle language is available.")

def download_youtube_video():
    # Get user input
    video_url = input("Enter the YouTube video URL: ")

    # List available formats for user reference
    list_formats(video_url)

    # Ask for user preference between video or audio download
    download_type = input("\nDo you want to download 'video' or 'audio' only? ").strip().lower()

    # Set video-specific inputs if needed
    if download_type == 'video':
        video_resolution = input("Enter the desired video resolution (e.g., 720, 1080): ")
        format_string = f'bestvideo[height<={video_resolution}]+bestaudio/best[height<={video_resolution}]'
        file_extension = ".mp4"
    else:
        audio_format = input("Enter the desired audio format (e.g., mp3, m4a, best): ")
        format_string = f'bestaudio'
        file_extension = f".{audio_format}"

    # Use tkinter to get a save path from the user
    root = tk.Tk()
    root.withdraw()  # Hide the root window
    save_path = filedialog.asksaveasfilename(defaultextension=file_extension,
                                             filetypes=[("Video files", "*.mp4"), ("Audio files", f"*.{audio_format}" if download_type == 'audio' else "*.mp3")])

    if not save_path:
        print("No save path selected. Download canceled.")
        return

    # Configure yt-dlp options based on user input
    ydl_opts = {
        'format': format_string,
        'outtmpl': save_path,

        # Post-processing for audio if needed
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': audio_format,
            'preferredquality': '192',
        }] if download_type == 'audio' else []
    }

    # Download the video using the selected options
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([video_url])
            print(f"Download complete! File saved to: {save_path}")

    except yt_dlp.utils.ExtractorError as e:
        print(f"An error occurred: {e}. Please ensure the chosen resolution is available.")

    # List available subtitle languages for user selection
    available_langs = list_available_subtitles(video_url)
    subtitle_lang = input("Enter the subtitle language code for auto-generated subtitles (e.g., en for English, fa for Persian): ")

    # Save path for subtitles
    subtitle_save_path = filedialog.asksaveasfilename(defaultextension=".vtt", filetypes=[("Subtitle files", "*.vtt")])
    if subtitle_save_path and subtitle_lang in available_langs:
        download_subtitle(video_url, subtitle_lang, subtitle_save_path)
    else:
        print("Invalid subtitle language or no subtitle save path specified. Subtitle download skipped.")

# Run the downloader
download_youtube_video()

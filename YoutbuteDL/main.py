import tkinter as tk
from os import chdir, path
from subprocess import run
from tkinter import filedialog


# Step 1: Define Application Utilities Class and Functions
class Utilities:
    def __init__(self):
        pass

    # Step 1.1: Define the function to give Option from user
    @staticmethod
    def option_chooser():
        print(""" Choose an Option To Start Application: 
            
            [0]- Available Formats
            [1]- Video Downloader
            [2]- Audio Downloader
            [3]- MP3 Downloader
            [4]- Subtitle Downloader
            [5]- Live Stream Downloader
            [6]- Playlist Downloader
            
            [99]- Exit
            
        """)
        option = int(input("[+] Enter Option Number => ")) or 1

        if option == 99:
            print("[*] Exiting the application.")
            exit()

        if option not in range(0, 7):
            print("[*] Invalid Option Number. Please choose a valid option.")
            return Utilities.option_chooser()

        return option

    # Step 1.2: Define the function to ask user for save path
    # noinspection PyShadowingNames
    @staticmethod
    def ask_save_path(directory=False):
        root = tk.Tk()
        root.withdraw()

        # if the directory Flag is True, then ask for directory, else ask for the file path
        if directory:
            savePath = filedialog.askdirectory()
            return savePath

        savePath = filedialog.asksaveasfilename(defaultextension=".mp4",
                                                filetypes=[("MP4 files", "*.mp4"), ("All files", "*.*")])
        return savePath

    @staticmethod
    def get_video_specification(audio=False):
        # Example usage
        url = input("Enter the video URL: ")

        # if the video option chooses and audio flag set False, show Video downloading Prompt
        if not audio:
            subtitleLang = input("Enter the subtitle language (e.g., fa): ") or "fa"
            resolution = input("Enter the Video resolution (e.g., 720): ") or "720"

        # if the audio option chooses and audio flag set True, show audio downloading Prompt
        else:
            resolution = input("Enter the Audio resolution (e.g., 720): ") or "720"

        savePath = Utilities.ask_save_path(directory=True) or path.abspath(".")
        if not savePath:
            print("No save path selected. Exiting.")
            exit()

        if audio:
            return url, resolution, savePath

        return url, resolution, subtitleLang, savePath # noqa

    @staticmethod
    def get_mp3_specification():
        # Example usage
        url = input("Enter the video URL: ")
        savePath = Utilities.ask_save_path(directory=True) or path.abspath(".")

        if not savePath:
            print("No save path selected. Exiting.")
            exit()
        return url, savePath

    @staticmethod
    def open_folder(path):
        chdir(path)
        run(['explorer', '.'])

# format_string = "bestaudio"
# Step 2: Define Downloading Class and Functions

# noinspection PyPep8Naming
class Downloader:
    def __init__(self):
        pass

    # Step 2.1: Define Function to Download Video and Audio
    @staticmethod
    def video_downloader(resolution, url, subtitle_lang, save_path, isPlaylistDl="no", audio_download=False):  # noqa
        # Initialize the format string compatible based on the audio_download flag
        if not audio_download:
            formatString = f"bestvideo[height={resolution}]+bestaudio/best[height={resolution}]"
        else:
            formatString = "bestaudio"

        # Check if the URL is a Playlist URL
        if "list=" in url.lower() or "index=" in url.lower():
            print("This is URL of a Playlist , Please choose the appropriate option.")
            isPlaylistDl = input("Do you want to download the full playlist? (yes/no): ").lower()

        # Base command
        command = [
            "yt-dlp",
            "-f", formatString,
            "--write-auto-sub",
            "--sub-lang", subtitle_lang,
            "--output", f"{save_path.replace('/', '\\')}\\%(title)s.%(ext)s",
            url,
            "--no-playlist"
        ]

        if isPlaylistDl.startswith("y"):
            command.remove("--no-playlist")
            # command.append("--yes-playlist") # by default yt-dlp download full playlist

        run(command)

    # Step 2.2: Define Function to Download Audio
    @staticmethod
    def mp3_downloader(url, save_path, isPlaylistDl="no"):

        # Check if the URL is a Playlist URL
        if "list=" in url.lower() or "index=" in url.lower():
            print("This is URL of a Playlist , Please choose the appropriate option.")
            isPlaylistDl = input("Do you want to download the full playlist? (yes/no): ").lower()

        # Base command
        command = [
            "yt-dlp",
            "--extract-audio",
            "--audio-format", "mp3",
            "--output", f"{save_path.replace('/', '\\')}\\%(title)s.%(ext)s",
            url,
            "--no-playlist"
        ]

        if isPlaylistDl.startswith("y"):
            command.remove("--no-playlist")
            # command.append("--yes-playlist") # by default yt-dlp download full playlist

        run(command)


# Final Step: Main Execution
if __name__ == "__main__":

    option = Utilities.option_chooser()


    # if option == 1 mean Video Downloader choose by user
    if option == 1:
        print("<<<<*-/ Video Downloader \\-*>>>>\n")

        url, resolution, subtitleLang, savePath = Utilities.get_video_specification()
        Downloader.video_downloader(resolution, url, subtitleLang, savePath)

        # Open downloaded location in the file explorer
        Utilities.open_folder(savePath)

    # if option == 2 mean Audio Downloader choose by user
    elif option == 2:
        print("<<<<*-/ Audio Downloader \\-*>>>>\n")

        url, resolution, savePath = Utilities.get_video_specification(audio=True)
        Downloader.video_downloader(resolution, url, "en", savePath, audio_download=True)

        # Open downloaded location in the file explorer
        Utilities.open_folder(savePath)

    # if option == 3 mean MP3 Downloader choose by user
    elif option == 3:
        print("<<<<*-/ MP3 Downloader \\-*>>>>\n")

        url, savePath = Utilities.get_mp3_specification()
        Downloader.mp3_downloader(url, savePath)

        # Open downloaded location in the file explorer
        Utilities.open_folder(savePath)

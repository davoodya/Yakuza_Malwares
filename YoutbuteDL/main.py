import os.path
from idlelib.search import find_again
from subprocess import run
import tkinter as tk
from tkinter import filedialog
from os import chdir


# Step 1: Define Application Utilities Class and Functions
class Utilities:
    def __init__(self):
        pass

    # Step 1.1: Define the function to give Option from user
    @staticmethod
    def option_chooser():
        print(""" Choose an Option's To Start Application: 
            [1]- Video Downloader
            [2]- Audio Downloader
            [3]- Subtitle Downloader
            [4]- Live Stream Downloader
            
        """)

    # Step 1.2: Define the function to ask user for save path
    # noinspection PyShadowingNames
    @staticmethod
    def ask_save_path(directory=False):
        root = tk.Tk()
        root.withdraw()

        # if the directory Flag is True, then ask for directory, else ask for the file path
        if directory:
            savePath = filedialog.askdirectory()
            return savePath

        savePath = filedialog.asksaveasfilename(defaultextension=".mp4",
                                                filetypes=[("MP4 files", "*.mp4"), ("All files", "*.*")])
        return savePath



# format_string = "bestaudio"
# Step 2: Define Downloading Class and Functions

class Downloader:
    def __init__(self):
        pass

    # Step 2.1: Define Function to Download Video and Audio
    @staticmethod
    def download_video(resolution, url, subtitle_lang, download_type, save_path, isPlaylistDl="no", audio_download=False): # noqa
        # Initialize the format string compatible based on the audio_download flag
        if not audio_download:
            formatString = f"bestvideo[height={resolution}]+bestaudio/best[height={resolution}]"
        else:
            formatString = "bestaudio"


        # Check if the URL is a Playlist URL
        if "list=" in url.lower() or "index=" in url.lower():
            print("This is URL of a Playlist , Please choose the appropriate option.")
            isPlaylistDl = input("Do you want to download the full playlist? (yes/no): ").lower()


        # Base command
        command = [
            "yt-dlp",
            "-f", formatString,
            "--write-auto-sub",
            "--sub-lang", subtitle_lang,
            "--output", f"{save_path.replace('/', '\\')}\\%(title)s.%(ext)s",
            url,
            "--no-playlist"
        ]

        if isPlaylistDl.startswith("y"):
            command.remove("--no-playlist")
            # command.append("--yes-playlist") # by default yt-dlp download full playlist

        run(command)

    # Step 2.2: Define Function to Download Audio



# Final Step: Main Execution
if __name__ == "__main__":
    # Example usage
    url = input("Enter the video URL: ")

    resolution = input("Enter the resolution (e.g., 720): ")
    subtitleLang = input("Enter the subtitle language (e.g., fa): ")
    downloadType = input("Enter the download type (video/audio): ").lower()

    # Get save a path from user
    savePath = Utilities.ask_save_path(directory=True)
    if not savePath:
        print("No save path selected. Exiting.")
        exit()

    # Option to choose built-in downloader
    # use_builtin_downloader = input ("Use built-in downloader? (yes/no): ").strip().lower() == "yes"


    """ Testing lines, should changes later based on the Option"""
    # Check download type and start download base on it
    if downloadType == "video":
        Downloader.download_video(resolution, url, subtitleLang, downloadType, savePath)

    # Else mean a download type is audio
    else:
        Downloader.download_video(resolution, url, subtitleLang, downloadType, savePath, audio_download=True)

    # open downloaded location in the file explorer
    chdir(savePath)
    run(['explorer', '.'])
